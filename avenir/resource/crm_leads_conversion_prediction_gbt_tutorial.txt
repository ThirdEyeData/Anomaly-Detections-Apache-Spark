This tutorial is for predicting CRM lead conversion with Gradient Boosted Trees (GBT) and 
ScikitLearn. 

Setup
=====
Make sure you have ../lib and ../supv directories with all the python files wrt where gb.py
is. The drive code is in gb.py. Configuration is contained in gb.properties. Since your python
installation is likely to be different, please run all python scripts starting with 
python abc.py ...

I am using Anacondta which includes python along with many common python data science modules
I am using tge version anaconda2-2.5.0. Python module jprops is used. Please install it 
running  "pip install jprops"

Input data generation
=====================
./sales_lead.py generate <num_of_leads > leads.txt
where
num_of_leads = number of leads e.g 5000

Convert categorical variables to dummy binary variables
=======================================================
./sales_lead.py genDummyVar  <num_of_leads> leads.txt > <output_file>
the file leads.txt was generated in the last step

Train model
===========
Set the following parameters in gb.properties. You could also change any parameter in the 
train group. 
common.mode=train

Run
./gb.py gb.properties

Train and Validate with parameter search
========================================
Set the following parameters in gb.properties. You could also change any parameter train group.
common.mode=trainValidate

If you want to do parameters search set the following parameter
train.search.param.strategy=guided

Set the list of parameters to be included in search as below. The parameter list is up to you
train.search.params=train.search.learning.rate:float,train.search.num.estimators:int

For each of the parameters in the list, provide a list of values as below
train.search.learning.rate=0.04,0.07,0.12
train.search.num.estimators=40,70,120

Parameter names are same as in normal training except for the added word search in the parameter name

Run
./gb.py gb.properties

Train and Validate without parameter search
===========================================
Set the following parameters in gb.properties. You could also change any parameter train group.
common.mode=trainValidate

Set the following parameter
train.search.param.strategy=_

Make sure all parameters have singe values, in case you ran train and validate with parameter 
search earlier

Run
./gb.py gb.properties

Saving trained model
====================
Please make sure the following parameters are set. Feel free to change the model directory 
and file name

common.model.directory=model
common.model.file=crm_gb_model
train.model.save=True

Running in auto train mode
==========================
Set the following parameters in gb.properties. You could also change any parameter train group.
common.mode=autoTrain

Set the error and error difference threshold parameters 
train.auto.max.error=0.08
train.auto.max.error.diff=0.02

Do the remaining settings as in "Train and Validate with parameter search" section

Run
./gb.py gb.properties

Different use case and data set
===============================
To use gradient boosting predictor for another use case, you have to set the following meta data
related parameters properly.

train.data.file=leads_5000.txt
train.data.fields=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
train.data.feature.fields=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
train.data.class.field=17

predict.data.file=leads_1000.txt
predict.data.fields=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
predict.data.feature.fields=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16

validate.data.file=leads_5000.txt
validate.data.fields=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
validate.data.feature.fields=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
validate.data.class.field=17













