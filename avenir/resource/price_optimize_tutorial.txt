This tutorial is for price optimization using multi arm bandit algorithms. In this tutorial, 
we will be using epsilon-greedy and UCB1 algorithm.

There are set of products. Each product has a set of candidate prices. The goal is to find
the optimum price for each product

Dependency
==========
Please read dependency.txt for dependency on other jars and how to handle it

Generate candiate prices
========================
Run the python script as below. We are generating prices for 100 products. Certain
statistics about prices are saved in price_stat.txt file. The file price_stat.txt will 
contain base revenue data, from revenue data is generated later . The file price.txt will
contain number of candidate prices for each product. This will be used in the first iteration

./price_opt.py price 100 price_stat.txt > inc_return1.txt

First round
============
Create initial revenue data as follows
./price_opt.py inret price_stat.txt 2 > agr_ret.txt

Copy agr_ret.txt to input path of multi arm bandit MR

Rum multi arm bandit MR
=======================
Run the map reduce as below. For UCB1 algorithm, the MR class should be changed to 
org.avenir.reinforce.AuerDeterministic.

If option #4 in dependency.txt is used, then the jar name should be the jar file name 
generated following option #4

JAR_NAME=/home/pranab/Projects/avenir/target/avenir-1.0.jar
CLASS_NAME=org.avenir.reinforce.GreedyRandomBandit

echo "running mr"
IN_PATH=/user/pranab/grba/input
OUT_PATH=/user/pranab/grba/output
echo "input $IN_PATH output $OUT_PATH"
hadoop fs -rmr $OUT_PATH
echo "removed output dir"

hadoop jar $JAR_NAME  $CLASS_NAME -Dconf.path=/home/pranab/Projects/bin/avenir/prop.properties  $IN_PATH  $OUT_PATH

Generate profit data for selected price for each product
========================================================
Copy the output of multi arm bandit MR to a file select3.txt. The number 3 indicates that 
the output is for round 3. We are using round 3 as example, Run the python script as below. 
The profit data for the selected prices  will be in the file inc_return3.txt

./price_opt.py return price_stat.txt  select3.txt > inc_return3.txt

Generate running aggregate MR for profit data
=============================================
Copy inc_return3.txt (iteration 3 for example) to /user/pranab/grba/input.  Run the 
RunningAggregate MR as below

If option #4 in dependency.txt is used, then the jar name should be the jar file name 
generated following option #4

JAR_NAME=/home/pranab/Projects/chombo/target/chombo-1.0.jar
CLASS_NAME=org.chombo.mr.RunningAggregator

echo "running mr"
IN_PATH=/user/pranab/grba/input

OUT_PATH=/user/pranab/ruag/output
echo "input $IN_PATH output $OUT_PATH"
hadoop fs -rmr $OUT_PATH
echo "removed output dir"

hadoop jar $JAR_NAME  $CLASS_NAME -Dconf.path=/home/pranab/Projects/bin/avenir/prop.properties  $IN_PATH  $OUT_PATH


Next round
==========
1. Delete all files in /user/pranab/grba/input and 
2. copy /user/pranab/ruag/output/part-r-00000 to /user/pranab/grba/input. 
3. Increment the parameter current.round.num
4. Go back to running multi arm bandit MR and repeat all the susequent steps.


Configuration
=============
Here is the content of prop.properties

field.delim.regex=,
field.delim=,
num.reducer=1

#common MAB configurations
current.round.num=1
count.ordinal=3
reward.ordinal=6
global.batch.size=1
min.reward=0

#GreedyRandomBandit 
#There are other parameters which dafault to some vale. If you want to override 
# default, explicitly add them.
random.selection.prob=0.3
prob.reduction.algorithm=linear
prob.reduction.constant=2.0

#AuerDeterministic
det.algorithm=AuerUBC1

#RunningAggregator
rug.quantity.attr.ordinals=2
rug.id.field.ordinals=0,1
incremental.file.prefix=inc


