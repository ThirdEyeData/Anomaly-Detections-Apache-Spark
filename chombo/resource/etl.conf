
#simpleDataValidator {
#	field.delim.in = ","
#	field.delim.out = ","
#	sub.field.delim.in = ":"
#	field.types = ["string", "string", "string", "date", "int", "int", "double", "string"]
#	date.format = "yyyy-MM-dd HH:mm:ss"
#	sample.fraction = 0.05
#	invalid.field.marker = "[x]"
#	invalid.record.marker = "[xx]"
#   check.missing.field.only = false
#   output.valid.recs = false
#	debug.on = true
#	save.output = true
#}

#dataValidator {
#	field.delim.in = ","
#	field.delim.out = ","
#	val.tag.separator = ":"
#	filter.invalid.records = true
#	output.invalid.records = true
#	invalid.records.output.file = "hdfs:///output/etl/val/inva"
#	schema.file.path = "/Users/pranab/Projects/bin/chombo/meta/etl/electr_prod.json"
#	debug.on = true
#	save.output = true
#	validator {
#		0 = ["notMissing"]
#  		1 = ["membership", "notMissing"]
#		2 = ["membership", "notMissing"]
#		3 = ["exactLength", "notMissing"]
#		4 = ["min", "max", "notMissing"]
#    	5 = ["min", "max", "notMissing"]
#    }
#}

flatRecordExtractorFromJson {
	field.delim.out = ","
	schema.file.path = "/Users/pranab/Projects/bin/chombo/rawSchemaevent.json"
	fail.on.invalid = true
	normalize.output = false
	id.attr.paths = ["acctID"]
	entity.list = ["root", "usages@a"]
	debug.on = true
	save.output = false
}

normalizer {
	field.delim.in = ","
	field.delim.out = ","
	num.attrs = [
		{
			ordinal = 2
			type = "double"
		}
		{
			ordinal = 3
			type = "double"
		}
		{
			ordinal = 4
			type = "double"
		}
	]
	output.precision = 3
	norm.strategy = "zScore"
	outlier.trunc.level = 2.0
	force.unit.range.for.zscore = true
	debug.on = false
	save.output = true
}

#retail data
simpleDataValidator {
	field.delim.in = ","
	field.delim.out = ","
	sub.field.delim.in = ":"
	field.types = ["int", "int", "string", "int", "date", "double", "int", "string"]
	date.format = "yy/MM/dd HH:mm"
	invalid.field.marker = "[X]"
	invalid.record.marker = "[XX]"
	check.missing.field.only = false
	output.valid.recs = true
	debug.on = true
	save.output = true
}

duplicateRemover {
	field.delim.in = ","
	field.delim.out = ","
	key.field.ordinals = [1,3,6]
	output.mode = "all"
	output.wholeRec = true
	dup.recs.file.path = "file:///Users/pranab/Projects/bin/chombo/other/dupr"
	debug.on = true
	save.output = true
}

#retail data
dataValidator {
	field.delim.in = ","
	field.delim.out = ","
	invalid.records.output.file = ""
	val.tag.separator = "#"
	filter.invalid.records = true
	output.invalid.records = true
	tag.with.failed.validator = true
	invalid.field.mask = "xxxxxx"
	invalid.records.output.file = "file:///Users/pranab/Projects/bin/chombo/output/etl/val/inva"
	schema.file.path = "/Users/pranab/Projects/bin/chombo/meta/etl/retail_order.json"
	debug.on = true
	save.output = false
	membershipExtSrc {
		filePath = "/Users/pranab/Projects/bin/chombo/other/etl/products.txt"
		colIndex = 0
		delim = ","
	}
	pipedMaxMonetaryAmount {
		script = "./check_max_amount.py"
		config = ["prodFile:max_amount.txt"]
		workingDir = "/Users/pranab/Projects/bin/chombo"
	}
}
