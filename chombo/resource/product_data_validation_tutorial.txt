This tutorial is data validation. Set of out of the box validators are used to 
validate data.  Make necessary changes in the relevant files, 
according to your environment.

Dependent script
================
Checkout the project visitante. Take the script util.py and sampler.py from the project and placeit
in ../lib directory with respect the directory containing store_order.py

Deployment
==========
Please refer to building_uber_jar.txt

1. Create products data
=======================
./electr_prod.py <num_of_products> > <product_data_file>

Edit the output file so that data violates validation rules for some records

2. Export input to HDFS
=======================
hadoop fs -put <product_data_file> /user/pranab/dava/input

3. Export metadata to HDFS
==========================
hadoop fs -put electr_prod.json /user/pranab/meta/dava

4. Run validation map reduce
============================
./etl.sh validate

5. Validation report
====================
It's available at the location specified through invalid.data.file.path config
parameter.

6. Configuration
================
Sample configuration is in etl.properties. This only defines high level configuration e.g., what 
validator should be used for what field.

Many of the validators will use metadata from JSON schema as configuration parameters.
Here are the attribute metadata  that can be set in the JSOn schema file. Depending on the validator 
type, some of them will be used. You can look inside the classes StringValidator and NumericalValidator 
to find out how they are used.

- min 
- max 
- mean 
- variance
- stdDev
- skew
- maxZscore
- datePattern
- nullable;
- stringPattern
- minString
- maxString
- length
 
There are some validators that use more complex configuration. For example StatsBasedRangeValidator 
does range validation based on statistical analysis performed on sample data. This validator expects an 
instance of NumericalAttrStatsManager to be passed as part of a context hash map.

In future we may have validators that may require complex configuration, passed TypeSafe hcon 
configuration which support nested structure like JSON.


